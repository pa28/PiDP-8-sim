/===============================================================================
/ "Deep Thought" | The Ultimate PDP-8 Front Panel "Blinkenlights" Program
/                | SBC6120 version assuming 32K RAM, KL8, and no EAE present.
/-------------------------------------------------------------------------------
/
/ This reads the front panel switch register to determine the speed and speed
/ variation of the flashing lights. It implements a simple but sufficient linear
/ congruential pseudo random number generator (LCPRNG) to generate visually
/ unpredictable values for the AC and Memory Address to contain while we wait
/ for the next serial port (KL8) interrupt. (See detailed explanation below.)
/
/-------------------------------------------------------------------------------
/                 Contemporary PDP-8 FREEWARE written and placed
/                  into the PUBLIC DOMAIN by Steve Gibson, 2009
/===============================================================================

/ Implementation notes - This program uses an SBC6120/FP6120-specific feature
/ that will not work on a regular PDP-8: The program manually takes over control
/ of the data lights.  This is done because the 30hz sampling of the accumulator
/ sometimes catches the AC at a bad time causing the display to flicker annoyingly.
/ This would NOT be a problem on a real PDP-8, since its AC display is not being
/ sampled and held.

CALLBIOS=6206           / Call SBC6120 BIOS function, function code follows call
LIGHTS=12               / BIOS function to take over the data display lights
                        
/ Since we don't have programmatic control over the memory lights, if we want to
/ control them it's necessary for us to actually GO somewhere and remain there.
/ This program functions by filling fields 1-7 (not field 0) with nothing but
/ "JMP ." (jump to yourself) instructions. Thus, when we jump somewhere we loop
/ at that single location until a serial port interrupt brings us back to location
/ zero.  At that point we determine whether we've waited long enough, and either
/ immediately return to waiting at the same location, or generate new randomness.

RTF=6005                / This "Restore Flags" opcode, which we are defining here,
                        / is unknown to the PAL-8 assembler because it is only
                        / valid when the PDP-8 is equipped with extended memory.
                        / It is used for cross-field interrupt returns by loading
                        / fields of the AC into the extended memory field regs.
                        / whose effects are deferred until the next jump. inst.

/-------------------------------------------------------------------------------
*0200
		JMP I  StartAddr
StartAddr,	RunFromHere

*0                                      / load at loc 0
IntReturn,      0                       / interrupt return loc
                                        
                / this is our super-minimal inner loop to keep the address
                / lights as fully on or off as possible. We do the bare minimum
                / here in order to get right back to our waiting location

                ISZ     AccumLow        / bump our inner-loop counter & probably
                JMP     Continue        / get back to waiting immediately...
                                        
                CLA OSR                 / get the current switch register
                CIA                     / negate it for a change detection compare
                TAD     LastSwitchReg   / for mid-delay changes in the timing
                SZA                     / if no change, just keep delaying
                JMP     ChangeLights    / the register changed, abort this cycle
                
                ISZ     AccumHigh       / bump our outer-loop counter
                JMP     Leave           / restore values and resume waiting
                
                / either our time is up for changing the lights (with both the
                / inner "AccumLow" loop and the outer "AccumHigh" loop having
                / wrapped around to zero) ... *OR* the user has changed the
                / switch register to change the blinking characterization, in
                / either event, we compute a new set of lights and light-delay.
                
ChangeLights,   JMS     GetRand         / get a new random value
                DCA     IntReturn       / save new waiting location. we will
                                        / return indirectly to this location
                                        / once everything else is set up
                
                JMS     GetRand         / establish the next instruction field
                AND     CInstField      / retain only bits 6-8 (IF)
                SNA                     / if we're not in page 0
                TAD     C0010           / collision possible, so set to field 1
                TAD     C0200           / turn on the Interrupt Enable bit
                DCA     LoopField       / set next loop field to 4

                OSR                     / read the switches
                DCA     LastSwitchReg   / save for mult & mid-delay testing
                TAD     LastSwitchReg   / get the switch reg
                AND     C0077           / mask the six speed control bits
                IAC                     / make sure it's not zero
                DCA     SpeedControl    / save for the random # multiply
                
                TAD     LastSwitchReg   / get the switch register again
                BSW                     / swap 6-bit halves
                AND     C0077           / keep the lower 6 bits
                DCA     SpeedVariation  / save the amount of variation
                
                JMS     GetRand         / pickup another 12-bit random number
                AND     SpeedVariation  / retain only the lower specified bits
                IAC                     / now we have AC = 1 to ...
                JMS     MUY             / Multiply: AC <- LSB (AC * [.+1])
SpeedControl,   0                       / the multiply subroutine's multiplicand
                CMA                     / 1's compliment for an up-counter
                DCA     AccumHigh       / save the new outer-loop delay count

Leave,          TAD     CBaudDelay      / reset our inner-loop counter
                DCA     AccumLow
Continue,       CLSC                    / clear clock interrupt
                NOP                     / skipped if interrupt set
                CLEI                    / enable clock interrupt
                TAD     LoopField       / put the RTF's memory field into AC
                RTF                     / set the restored pending field & ION
                JMP I   IntReturn       / return to the place we'll be waiting
                                        / with memory field and location set
                                        
/ GetRand ----------------------------------------------------------------------
/               This is the simplest way I know of to generate highly random
/               looking 12-bit values.  It's a Linear Congruential Pseudo Random
/               Number Generator (LCPRNG).  Each time it's called, it evaluates
/               the expression:  NextRand = LastRand * 5545 + 541 (all octal)
                
GetRand,        0                       / subroutine return
                TAD     LastRand        / get the last PRNG value
                JMS     MUY             / multiply by the following constant:
                5545                    / 2917 base 10 - LCPRNG multiplicand
                TAD     CRandAdd        / sum in our LCPRNG addend
                DCA     LastRand        / save this for next time
                TAD     AccumHigh       / return the HIGH 12-bits as our result
                JMP  I  GetRand         / return the AC to the caller

/ MUY --------------------------------------------------------------------------
/               This is a full 12x12 multiply, needed because the HD6120 PDP-8
/               emulation chip used by the SBC6120 inexplicably lacks the EAE
/               "Extended Arithmetic Element" multiplier.  Annoying as this is,
/               it does mean that these "ToggleToys" will be usable on ALL real
/               PDP-8 systems, including those without EAE's.
/
/  On Entry:    AC contains Multipler & the word after the call has Multiplicand
/    Return:    least significant 12-bits in AC, most significant in AccumHigh.

MUY,            0                       / subroutine return
                DCA     Multiplier      / save the multiplier for shifting              
                TAD     C7764           / setup our -12 loop counter
                DCA     PhaseCount
                DCA     AccumLow        / clear our 24-bit results accumulator
                DCA     AccumHigh       

MuyShift,       TAD     Multiplier      / get a bit from the multiplier
                CLL RAL                 / move the high-bit into LINK
                DCA     Multiplier      / put the updated multiplier back
                SNL                     / we do need to add-in the multiplicand
                JMP     Iterate         / no multiplicand add-in
                
                TAD  I  MUY             / add the multiplicand into accumulator
                TAD     AccumLow        / this *may* overflow, clearing the LINK
                DCA     AccumLow        / either way, put the updated low 12 back
                SNL                     / if LINK is still '1', no overflow
                ISZ     AccumHigh       / bump the high-half if we carried out
                
Iterate,        ISZ     PhaseCount      / see whether we've done all 12 bits
                JMP     Shift24         / not done, so shift and iterate again

                CLL CLA                 / return the lower 12-bits in AC
                TAD     AccumLow
                ISZ     MUY             / return to the instruction after multiplier
                JMP  I  MUY
                
Shift24,        TAD     AccumLow        / get the lower 12-bit half
                CLL RAL                 / shift it left, high bit into LINK
                DCA     AccumLow        / put back the new low half
                TAD     AccumHigh       / get the upper 12-bit half
                RAL                     / shift it left, LINK into low bit
                DCA     AccumHigh       / put back the new high half
                JMP     MuyShift
        
/------------------------------------------------------------------------------
/ At program startup we call the SBC6120's BIOS to inform it that we'll be
/ taking over display of the data lights and to shut-down its 30hz sampling
/ of the AC.  We then fill the seven 4K word memory fields (1-7) with nothing
/ but "JMP ." (jump to yourself) instructions so that when we jump out to any
/ such location we'll simply remain there (with the memory address lights frozen)
/ until we're yanked back by the completion of the serial port character that we
/ always start sending just before we jump out to never-never land.

RunFromHere,    CLA
                DCA     LastRand        / setup the start of our filling

                TAD     CFirstDatField  / init to data field zero 
                DCA     NewDataField
NewDataField,   CDF     10              / set our new storage target data field
                CLA                     / (need to clear after switching fields)

                / fill memory with current page "JMP ." instructions

FillMem,        TAD     LastRand        / get the next target location
                AND     C0177           / keep only the target loc's page bits
                TAD     CJmpCurrentPg   / convert into a "JMP ." instruction
                DCA  I  LastRand        / save the "JMP ." inst @ TargetLoc
                ISZ     LastRand        / bump to next target location
                JMP     FillMem
                
                / we've wrapped into the next 4K word field

                TAD     NewDataField    / get the current data field
                TAD     C0010           / bump to the next data field
                DCA     NewDataField    / save the next data field
                TAD     NewDataField    / get back the new data field
                AND     CInstField      / did we wrap out of the last one?
                SZA                     / if zero, we're all done
                JMP     NewDataField    / let's keep filling in the next field
                CDF     00              / and leave us back at data field 0
                JMP     ChangeLights    / ... and off we go ...
                                
/------------------------ Initialized Constant Values -------------------------

C0010,          0010                    / constant 0010 for data field inc
C0077,          0077                    / constant 0077 for masking 6-bits of SW
C0177,          0177                    / constant 0177 for masking page bits
C0200,          0200                    / constant 0200 for RTF's ION bit
C7764,          7764                    / constant 7764 for -12 multiply counter

CInstField,     0070                    / GTF/RTF instruction field bitmask
CRandAdd,       541                     / 353 base 10
CJmpCurrentPg,  5200                    / inst for jmp to current page loc 0
CFirstDatField, CDF     10              / "change to data field 1"

CBaudDelay,     7770                    / baud rate compensation value
                                        / 7740 - 38400
                                        / 7760 - 19200
                                        / 7770 -  9600 baud
                                        / 7774 -  4800
                                        / 7776 -  2400
                                        / 7777 -  1200 or slower

/-------------------------- Uninitialized Variables ---------------------------

SpeedVariation, 0                       / 6-bits of switch register
PhaseCount,     0                       / our multiplier-shift counter
AccumLow,       0                       / low 12-bits of 12x12 mult
AccumHigh,      0                       / high 12-bits of 12x12 mult
Multiplier,     0                       / temp used by multiplication
LoopField,      0                       / the memory Field while waiting
LastRand,       0                       / our previous random value
LastSwitchReg,  0                       / the last SW Reg reading

/------------------------------------------------------------------------------
$
